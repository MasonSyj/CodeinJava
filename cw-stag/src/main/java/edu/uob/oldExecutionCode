
    public void parseGameAction(String[] tokens, String currentPlayerName) {
        System.out.println("Begin parsing GameAction: ");
        Set<String> subjects = new HashSet<String>();
        for (int i = 0; i < tokens.length; i++){
           subjects.add(tokens[i]);
        }
        String subjectInString = subjects.stream().sorted((a, b) -> a.compareTo(b)).toList().toString();
        System.out.println("subjectInString" + subjectInString);
        for (GameAction gameAction: gameActionSet){
            if (matchedGameAction(gameAction, subjects)){
                System.out.println("following GameAction matched: ");
                System.out.println(gameAction.getTriggers().toString() + " " + gameAction.getSubjects().toString());
                executeMatchedGameAction(gameAction, currentPlayerName);
                return;
            }else{
                System.out.println("didn't match the game Action");
                boolean result = executeGameAction(gameAction, subjects, currentPlayerName);
                if (result == true){
                    System.out.println("correctgameAction: " + gameAction.printSubject());
                    return;
                }
            }

        }
    }

    public boolean matchedGameAction(GameAction gameAction, Set<String> subjects){
        boolean hasTrigger = false;
        for (String trigger: subjects){
            if (gameAction.getTriggers().contains(trigger)){
                hasTrigger = true;
                break;
            }
        }
        if (hasTrigger == false){
            return false;
        }

        for (String subject: subjects){
           if (gameAction.getSubjects().contains(subject)) {
               return true;
           }
        }
        return false;
    }

    public void executeMatchedGameAction(GameAction gameAction, String playerName){
        Map<String, GameEntity> searchingPool = buildSearchingPool(gameAction, playerName);
        for (String subject: gameAction.getSubjects()){
            if (!searchingPool.containsKey(subject)){
                return;
            }
        }

        StringBuilder result = new StringBuilder();

        Player currentPlayer = playerHashMap.get(playerName);

        for (String consumable: gameAction.getConsumables()){
            result.append("Consumed: " + consumable);
            result.append("  \n");
            if (consumable.equals("health")){
                currentPlayer.decreaseHealth();
                if (currentPlayer.getHealth() == 0){
                    currentPlayer.resetHealth();
                    currentPlayer.setCurrentLocation(startLocation);
                    currentLocation = startLocation;
                    result.append("You died, go back to the start Location. \n");
                }
            }
            if (currentPlayer.getInventory().containsKey(consumable)){
                currentPlayer.getInventory().remove(consumable);
            } else if (currentLocation.getCharacters().containsKey(consumable)){
                currentLocation.getCharacters().remove(consumable);
            } else if (currentLocation.getFurnitures().containsKey(consumable)){
                currentLocation.getFurnitures().remove(consumable);
            } else if (currentLocation.getArtefacts().containsKey(consumable)){
                currentLocation.getArtefacts().remove(consumable);
            } else if (currentLocation.getName().equals(consumable)){
                currentLocation = null;
            }
        }

        for (String production: gameAction.getProductions()){
            if (locationHashMap.containsKey(production)){
                currentLocation.addExit(locationHashMap.get(production));
                result.append("\nnew exit: ");
                result.append(production);
            } else {
                locationHashMap.get("storeroom").getArtefacts().put(production, new Artefact(production, ""));
                result.append("\nnew Artefacts at storeroom");
                result.append(production);
            }
        }
        System.out.println("--------------------------------");
        System.out.println("executeMatchedGameAction: ");
        System.out.println(result.toString());
        System.out.println("--------------------------------");
        gameActionResult = result.toString();
    }

    public Map<String, GameEntity> buildSearchingPool(GameAction gameAction, String playerName){
        Map<String, GameEntity> searchingPool = new HashMap<String, GameEntity>();
        for (String str: gameAction.getTriggers()){
            searchingPool.put(str, null);
        }

        for (String str: playerHashMap.get(playerName).getInventory().keySet()){
            searchingPool.put(str, playerHashMap.get(playerName).getInventory().get(str));
        }

        for (String str: currentLocation.getFurnitures().keySet()){
            searchingPool.put(str, currentLocation.getFurnitures().get(str));
        }

        for (String str: currentLocation.getArtefacts().keySet()){
            searchingPool.put(str, currentLocation.getArtefacts().get(str));
        }

        for (String str: currentLocation.getCharacters().keySet()){
            searchingPool.put(str, currentLocation.getCharacters().get(str));
        }

        searchingPool.put(currentLocation.getName(), currentLocation);
        return searchingPool;

    }

    public boolean executeGameAction(GameAction gameAction, Set<String> subjects, String playerName){
        Map<String, GameEntity> searchingPool = buildSearchingPool(gameAction, playerName);

        int cnt = 0;
        for (String subject: subjects){
            System.out.println("current subject / trigger: " + subject);
            if (searchingPool.containsKey(subject)){
                System.out.println("subject existed in the searchingPool:" + subject);
                cnt++;
            }
        }

        if (cnt != gameAction.getSubjects().size() + 1){
            return false;
        }
        System.out.println("succeed to match");
        StringBuilder result = new StringBuilder();

        for (String consumable: gameAction.getConsumables()){
            result.append("Consumed: " + consumable);
            result.append("  \n");
            if (playerHashMap.get(playerName).getInventory().containsKey(consumable)){
                playerHashMap.get(playerName).getInventory().remove(consumable);
            } else if (currentLocation.getCharacters().containsKey(consumable)){
                currentLocation.getCharacters().remove(consumable);
            } else if (currentLocation.getFurnitures().containsKey(consumable)){
                currentLocation.getFurnitures().remove(consumable);
            } else if (currentLocation.getArtefacts().containsKey(consumable)){
                currentLocation.getArtefacts().remove(consumable);
            } else if (currentLocation.getName().equals(consumable)){
                currentLocation = null;
            }
        }

        for (String production: gameAction.getProductions()){
            if (locationHashMap.containsKey(production)){
                currentLocation.addExit(locationHashMap.get(production));
                result.append("\nnew exit: ");
                result.append(production);
            } else {
                locationHashMap.get("storeroom").getArtefacts().put(production, new Artefact(production, ""));
                result.append("\nnew Artefacts at storeroom");
                result.append(production);
            }
        }
        gameActionResult = result.toString();
        return true;
    }
